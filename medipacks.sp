/*
 *  vim: set ai et ts=4 sw=4 :

    TF2 Medipacks - SourceMod Plugin
    Copyright (C) 2008  Marc Hörsken

    This program is free software; you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation; either version 2 of the License, or
    (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License along
    with this program; if not, write to the Free Software Foundation, Inc.,
    51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.

*/

/* Plugin Template generated by Pawn Studio */

#pragma semicolon 1

#include <sourcemod>
#include <sdktools>
#include <tf2>
#include <tf2_stocks>
#include <tf2_player>
#include <entlimit>

#define PL_VERSION "1.1.9"
#define SOUND_A "weapons/medigun_no_target.wav"
#define SOUND_B "items/spawn_item.wav"
#define SOUND_C "ui/hint.wav"

public Plugin:myinfo = 
{
    name = "TF2 Medipacks",
    author = "Hunter",
    description = "Allows medics to drop medipacks on death or with secondary Medigun fire.",
    version = PL_VERSION,
    url = "http://www.sourceplugins.de/"
}

new bool:g_IsRunning = true;
new bool:g_IsButtonDown[MAXPLAYERS+1];
new Float:g_MedicPosition[MAXPLAYERS+1][3];
new g_UberCharge[MAXPLAYERS+1];
new g_MedipacksTime[2048];
new g_FilteredEntity = -1;
new g_MedipacksCount = 0;
new Handle:g_IsMedipacksOn = INVALID_HANDLE;
new Handle:g_MedipacksSmall = INVALID_HANDLE;
new Handle:g_MedipacksMedium = INVALID_HANDLE;
new Handle:g_MedipacksFull = INVALID_HANDLE;
new Handle:g_MedipacksKeep = INVALID_HANDLE;
new Handle:g_MedipacksTeam = INVALID_HANDLE;
new Handle:g_MedipacksLimit = INVALID_HANDLE;
new Handle:g_DefUberCharge = INVALID_HANDLE;

new bool:g_NativeControl = false;
new g_NativeMedipacks[MAXPLAYERS + 1] = { 0, ...};
new g_NativeUberCharge[MAXPLAYERS + 1] = { 0, ...};

public bool:AskPluginLoad(Handle:myself,bool:late,String:error[],err_max)
{
    // Register Natives
    CreateNative("ControlMedipacks",Native_ControlMedipacks);
    CreateNative("SetMedipack",Native_SetMedipack);
    RegPluginLibrary("medipacks");
    return true;
}

public OnPluginStart()
{
    LoadTranslations("common.phrases");
    LoadTranslations("medipacks.phrases");

    CreateConVar("sm_tf_medipacks", PL_VERSION, "Medipacks", FCVAR_PLUGIN|FCVAR_SPONLY|FCVAR_REPLICATED|FCVAR_NOTIFY);
    g_IsMedipacksOn = CreateConVar("sm_medipacks","3","Enable/Disable medipacks (0 = disabled | 1 = on death | 2 = on command | 3 = on death and command)");
    g_MedipacksSmall = CreateConVar("sm_medipacks_small","10","UberCharge required for small Medipacks");
    g_MedipacksMedium = CreateConVar("sm_medipacks_medium","25","UberCharge required for medium Medipacks");
    g_MedipacksFull = CreateConVar("sm_medipacks_full","50","UberCharge required for full Medipacks");
    g_MedipacksKeep = CreateConVar("sm_medipacks_keep","60","Time to keep Medipacks on map. (0 = off | >0 = seconds)");
    g_MedipacksTeam = CreateConVar("sm_medipacks_team","0","Team to drop Medipacks for. (0 = any team | 1 = own team | 2 = opposing team)");
    g_MedipacksLimit = CreateConVar("sm_medipacks_limit","100","Maximum number of extra Medipacks on map at a time. (<1 = unlimited)");
    g_DefUberCharge = CreateConVar("sm_medipacks_ubercharge","25","Give medics a default UberCharge on spawn");

    HookConVarChange(g_IsMedipacksOn, ConVarChange_IsMedipacksOn);
    HookConVarChange(g_MedipacksSmall, ConVarChange_MedipacksUber);
    HookConVarChange(g_MedipacksMedium, ConVarChange_MedipacksUber);
    HookConVarChange(g_MedipacksFull, ConVarChange_MedipacksUber);
    HookConVarChange(g_MedipacksKeep, ConVarChange_MedipacksKeep);
    HookConVarChange(g_MedipacksTeam, ConVarChange_MedipacksTeam);
    HookConVarChange(g_DefUberCharge, ConVarChange_MedipacksUber);
    HookEvent("player_spawn", Event_PlayerSpawn);
    HookEvent("player_death", Event_PlayerDeath);
    HookEvent("teamplay_round_active", Event_RoundStart);
    RegConsoleCmd("sm_medipack", Command_Medipack);
    RegAdminCmd("sm_ubercharge", Command_UberCharge, ADMFLAG_CHEATS);

    CreateTimer(1.0, Timer_Caching, _, TIMER_REPEAT);
}

public OnMapStart()
{
    PrecacheModel("models/items/medkit_large.mdl", true);
    PrecacheModel("models/items/medkit_medium.mdl", true);
    PrecacheModel("models/items/medkit_small.mdl", true);
    PrecacheSound(SOUND_A, true);
    PrecacheSound(SOUND_B, true);
    PrecacheSound(SOUND_C, true);

    g_IsRunning = true;
}

public OnClientDisconnect(client)
{
    g_IsButtonDown[client] = false;
    g_UberCharge[client] = 0;
    g_MedicPosition[client] = NULL_VECTOR;
}

public OnGameFrame()
{	
    if(!g_IsRunning)
        return;

    new MedipacksOn = GetConVarInt(g_IsMedipacksOn);
    if (MedipacksOn < 2 && !g_NativeControl)
        return;

    new maxclients = GetMaxClients();
    for (new i = 1; i <= maxclients; i++)
    {
        if (g_NativeControl && g_NativeMedipacks[i] < 2)
            continue;

        if (!g_IsButtonDown[i] && IsClientInGame(i) &&
            TF2_GetPlayerClass(i) == TFClass_Medic)
        {
            if (GetClientButtons(i) & IN_ATTACK2)
            {
                g_IsButtonDown[i] = true;
                CreateTimer(0.5, Timer_ButtonUp, i);
                new String:classname[64];
                GetCurrentWeaponClass(i, classname, 64);
                if (StrEqual(classname, "CWeaponMedigun") &&
                    g_UberCharge[i] < 100 && TF2_IsUberCharge(i) == 0)
                {
                    TF_DropMedipack(i, true);
                }
            }
        }
    }
}

public ConVarChange_IsMedipacksOn(Handle:convar, const String:oldValue[], const String:newValue[])
{
    if (StringToInt(newValue) > 0)
    {
        g_IsRunning = true;
        PrintToChatAll("[SM] %t", "Enabled Medipacks");
    }
    else
    {
        g_IsRunning = false;
        PrintToChatAll("[SM] %t", "Disabled Medipacks");
    }
}

public ConVarChange_MedipacksUber(Handle:convar, const String:oldValue[], const String:newValue[])
{
    if (StringToInt(newValue) < 0 || StringToInt(newValue) > 100)
    {
        SetConVarInt(convar, StringToInt(oldValue), false, false);
    }
}

public ConVarChange_MedipacksKeep(Handle:convar, const String:oldValue[], const String:newValue[])
{
    if (StringToInt(newValue) < 0 || StringToInt(newValue) > 600)
    {
        SetConVarInt(convar, StringToInt(oldValue), false, false);
    }
}

public ConVarChange_MedipacksTeam(Handle:convar, const String:oldValue[], const String:newValue[])
{
    if (StringToInt(newValue) < 0 || StringToInt(newValue) > 2)
    {
        SetConVarInt(convar, StringToInt(oldValue), false, false);
    }
}

public Action:Command_Medipack(client, args)
{
    if(!g_IsRunning)
        return Plugin_Handled;

    new MedipacksOn = g_NativeControl ? g_NativeMedipacks[client]
        : GetConVarInt(g_IsMedipacksOn);
    if (MedipacksOn < 2)
        return Plugin_Handled;

    new TFClassType:class = TF2_GetPlayerClass(client);
    if (class != TFClass_Medic)
        return Plugin_Handled;

    new String:classname[64];
    GetCurrentWeaponClass(client, classname, 64);
    if(!StrEqual(classname, "CWeaponMedigun"))
        return Plugin_Handled;

    TF_DropMedipack(client, true);

    return Plugin_Handled;
}

public Action:Command_UberCharge(client, args)
{
    /* Show usage */
    if (args < 1)
    {
        ReplyToCommand(client, "[SM] %t", "UberCharge Usage");
        return Plugin_Handled;
    }

    /* Get the arguments */
    new String:arg1[32], String:arg2[32];
    GetCmdArg(1, arg1, sizeof(arg1));

    /* Try and find a matching player */
    new target = FindTarget(client, arg1);
    if (target == -1)
    {
        /* FindTarget() automatically replies with the 
         * failure reason.
         */
        return Plugin_Handled;
    }

    new String:name[MAX_NAME_LENGTH];
    GetClientName(target, name, sizeof(name));

    new bool:alive = IsPlayerAlive(target);
    if (!alive)
    {
        ReplyToCommand(client, "[SM] %t", "Cannot be performed on dead", name);
        return Plugin_Handled;
    }

    new TFClassType:class = TF2_GetPlayerClass(target);
    if (class != TFClass_Medic)
    {
        ReplyToCommand(client, "[SM] %t", "Not a Medic", name);
        return Plugin_Handled;
    }

    new charge = 100;
    /* Validate charge amount */
    if (args > 1)
    {
        GetCmdArg(2, arg2, sizeof(arg2));
        charge = StringToInt(arg2);
        if (charge < 0 || charge > 100)
        {
            ReplyToCommand(client, "[SM] %t", "Invalid Amount");
            return Plugin_Handled;
        }
    }

    if (TF2_SetUberLevel(target, charge))
        g_UberCharge[target] = charge;

    ReplyToCommand(client, "[SM] %t", "Changed UberCharge", name, charge);

    return Plugin_Handled;
}

public Action:Timer_Caching(Handle:timer)
{
    new maxclients = GetMaxClients();
    for (new i = 1; i <= maxclients; i++)
    {
        if (IsClientInGame(i) && TF2_GetPlayerClass(i) == TFClass_Medic)
        {
            g_UberCharge[i] = TF2_GetUberLevel(i);
            GetClientAbsOrigin(i, g_MedicPosition[i]);
        }
    }
    new MedipacksKeep = GetConVarInt(g_MedipacksKeep);
    new MedipacksLimit = GetConVarInt(g_MedipacksLimit);
    if (MedipacksKeep > 0 || MedipacksLimit > 0)
    {
        new time = GetTime() - MedipacksKeep;
        for (new c = 0; c < 2048; c++)
        {
            if (g_MedipacksTime[c] != 0 && g_MedipacksTime[c] < time)
            {
                g_MedipacksCount--;
                g_MedipacksTime[c] = 0;
                if (IsValidEntity(c))
                {
                    new String:classname[64];
                    GetEntityNetClass(c, classname, 64);
                    if(StrEqual(classname, "CBaseAnimating"))
                    {
                        EmitSoundToAll(SOUND_C, c, _, _, _, 0.75);
                        RemoveEdict(c);
                    }
                }
            }
        }
    }
}

public Action:Timer_ButtonUp(Handle:timer, any:client)
{
    g_IsButtonDown[client] = false;
}

public Action:Timer_PlayerDefDelay(Handle:timer, any:client)
{
    if (IsClientInGame(client))
    {
        new TFClassType:class = TF2_GetPlayerClass(client);
        if (class == TFClass_Medic)
        {
            new DefUberCharge = g_NativeControl ? g_NativeUberCharge[client]
                : GetConVarInt(g_DefUberCharge);
            if (DefUberCharge)
                TF2_SetUberLevel(client, DefUberCharge);
        }
    }
}

public Action:Event_RoundStart(Handle:event, const String:name[], bool:dontBroadcast)
{
    if(g_NativeControl)
        return;

    new MedipacksOn = GetConVarInt(g_IsMedipacksOn);
    switch (MedipacksOn)
    {
        case 1:
            PrintToChatAll("[SM] %t", "OnDeath Medipacks");
        case 2:
            PrintToChatAll("[SM] %t", "OnCommand Medipacks");
        case 3:
            PrintToChatAll("[SM] %t", "OnDeathAndCommand Medipacks");
    }
}

public Action:Event_PlayerSpawn(Handle:event, const String:name[], bool:dontBroadcast)
{
    new client = GetClientOfUserId(GetEventInt(event, "userid"));
    if (TF2_GetPlayerClass(client) == TFClass_Medic)
        CreateTimer(0.25, Timer_PlayerDefDelay, client);
}

public Action:Event_PlayerDeath(Handle:event, const String:name[], bool:dontBroadcast)
{
    if(!g_IsRunning)
        return;

    new client = GetClientOfUserId(GetEventInt(event, "userid"));
    if (!IsClientInGame(client) || TF2_GetPlayerClass(client) != TFClass_Medic)
        return;

    new MedipacksOn = g_NativeControl ? g_NativeMedipacks[client]
                                      : GetConVarInt(g_IsMedipacksOn);
    if (MedipacksOn < 1 || MedipacksOn == 2)
        return;

    if (TF2_GetPlayerClass(client) != TFClass_Medic)
        return;

    TF_DropMedipack(client, false);
}

public bool:MedipackTraceFilter(ent, contentMask)
{
    return (ent != g_FilteredEntity);
}

stock TF_SpawnMedipack(client, String:name[], bool:cmd)
{
    new Float:PlayerPosition[3];
    if (cmd)
        GetClientAbsOrigin(client, PlayerPosition);
    else
        PlayerPosition = g_MedicPosition[client];

    new MedipacksLimit = GetConVarInt(g_MedipacksLimit);
    if (MedipacksLimit > 0 && g_MedipacksCount >=  MedipacksLimit)
        return;

    if (PlayerPosition[0] != 0.0 && PlayerPosition[1] != 0.0 && PlayerPosition[2] != 0.0
        && IsEntLimitReached() == false)
    {
        PlayerPosition[2] += 4;
        g_FilteredEntity = client;
        if (cmd)
        {
            new Float:PlayerPosEx[3], Float:PlayerAngle[3], Float:PlayerPosAway[3];
            GetClientEyeAngles(client, PlayerAngle);
            PlayerPosEx[0] = Cosine((PlayerAngle[1]/180)*FLOAT_PI);
            PlayerPosEx[1] = Sine((PlayerAngle[1]/180)*FLOAT_PI);
            PlayerPosEx[2] = 0.0;
            ScaleVector(PlayerPosEx, 75.0);
            AddVectors(PlayerPosition, PlayerPosEx, PlayerPosAway);

            new Handle:TraceEx = TR_TraceRayFilterEx(PlayerPosition, PlayerPosAway, MASK_SOLID, RayType_EndPoint, MedipackTraceFilter);
            TR_GetEndPosition(PlayerPosition, TraceEx);
            CloseHandle(TraceEx);
        }

        new Float:Direction[3];
        Direction[0] = PlayerPosition[0];
        Direction[1] = PlayerPosition[1];
        Direction[2] = PlayerPosition[2]-1024;
        new Handle:Trace = TR_TraceRayFilterEx(PlayerPosition, Direction, MASK_SOLID, RayType_EndPoint, MedipackTraceFilter);

        new Float:MediPos[3];
        TR_GetEndPosition(MediPos, Trace);
        CloseHandle(Trace);
        MediPos[2] += 4;

        new Medipack = CreateEntityByName(name);
        DispatchKeyValue(Medipack, "OnPlayerTouch", "!self,Kill,,0,-1");
        if (DispatchSpawn(Medipack))
        {
            new team = 0;
            new MedipacksTeam = GetConVarInt(g_MedipacksTeam);
            if (MedipacksTeam == 2)
                team = ((GetClientTeam(client)-1) % 2) + 2;
            else if (MedipacksTeam == 1)
                team = GetClientTeam(client);

            SetEntProp(Medipack, Prop_Send, "m_iTeamNum", team, 4);
            TeleportEntity(Medipack, MediPos, NULL_VECTOR, NULL_VECTOR);
            EmitSoundToAll(SOUND_B, Medipack, _, _, _, 0.75);
            g_MedipacksCount++;
            g_MedipacksTime[Medipack] = GetTime();
        }
    }
}

stock bool:TF_DropMedipack(client, bool:cmd)
{
    new MedipacksSmall = GetConVarInt(g_MedipacksSmall);
    new MedipacksMedium = GetConVarInt(g_MedipacksMedium);
    new MedipacksFull = GetConVarInt(g_MedipacksFull);
    new charge = (cmd) ? TF2_GetUberLevel(client) : g_UberCharge[client];
    if (charge >= MedipacksFull && MedipacksFull != 0)
    {
        if (cmd)
            TF2_SetUberLevel(client, (charge-MedipacksFull));
        TF_SpawnMedipack(client, "item_healthkit_full", cmd);
        return true;
    }
    else if (charge >= MedipacksMedium && MedipacksMedium != 0)
    {
        if (cmd)
            TF2_SetUberLevel(client, (charge-MedipacksMedium));
        TF_SpawnMedipack(client, "item_healthkit_medium", cmd);
        return true;
    }
    else if (charge >= MedipacksSmall && MedipacksSmall != 0)
    {
        if (cmd)
            TF2_SetUberLevel(client, (charge-MedipacksSmall));
        TF_SpawnMedipack(client, "item_healthkit_small", cmd);
        return true;
    }
    if (cmd)
    {
        EmitSoundToClient(client, SOUND_A, _, _, _, _, 0.75);
        //	PrintCenterText(client, "Not enough UberCharge!");
    }
    return false;
}

public Native_ControlMedipacks(Handle:plugin,numParams)
{
    if (numParams == 0)
        g_NativeControl = true;
    else if(numParams == 1)
        g_NativeControl = GetNativeCell(1);
}

public Native_SetMedipack(Handle:plugin,numParams)
{
    if (numParams >= 1 && numParams <= 3)
    {
        new client = GetNativeCell(1);
        g_NativeMedipacks[client] = (numParams >= 2) ? GetNativeCell(2) : 3;
        g_NativeUberCharge[client] = (numParams >= 3) ? GetNativeCell(3) : 0;
    }
}

